#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#include <behaviors/rgbled_widget.dtsi>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

#define NUM 1 //MAC US
#define SYM 2 //MAC US
#define MARR 3 //MAC
#define JIS 4 //WIN JIS
#define JNUM 5 //WIN JIS
#define JSYM 6 //WIN JIS
#define WARR 7 //WIN
#define BT 8
#define MOUSE 9
#define SCROLL 10



#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };
    
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 0>;
        };        

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <2 1>;
        };
        
        single_quotation {
            bindings = <&kp SINGLE_QUOTE>;
            layers = <0>; 
            key-positions = <6 5>;
        };
        
        single_quotation_JIS {
            bindings = <&kp JP_SQT>;
            layers = <JIS>; 
            key-positions = <6 5>;
        };
                       
        tab {
            bindings = <&kp TAB>;
            key-positions = <8 7>;
        };

        eq {
            bindings = <&kp EQUAL>;
            layers = <0>; 
            key-positions = <20 19>;
        };
        
        eq_JIS {
            bindings = <&kp JP_EQUAL>;
            layers = <JIS>; 
            key-positions = <20 19>;
        };

        mac_layer_bt {
            bindings = <&tog BT>;
            key-positions = <18 17>;
        };
        
        mac_layer_arrow {
            bindings = <&tog MARR>;
            layers = <0 MARR>; 
            key-positions = <13 12>;
        };

        win_layer_arrow {
            bindings = <&tog WARR>;
            layers = <JIS WARR>; 
            key-positions = <13 12>;
        };        
                        
        minus {
            bindings = <&kp MINUS>;
            key-positions = <9 8>;
        };

        ctrl_alt_del {
            bindings = <&kp LC(RA(DEL))>;
            key-positions = <22 21>;
        };

        atmark {
            bindings = <&kp AT_SIGN>; 
            layers = <0>;  
            key-positions = <31 30>;
        };
        atmark_JIS {
            bindings = <&kp JP_AT>; 
            layers = <JIS>;  
            key-positions = <31 30>;
        };
    };

  behaviors {
      
    lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    
    scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
            // 追加: スクロールのタップ時間を設定 (20ms)
            tap-ms = <20>;
        }; 
        
    scroll_left_right: behavior_sensor_rotate_mouse_wheel_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;
            // 追加: スクロールのタップ時間を設定 (20ms)
            tap-ms = <20>;
        };         
        
    td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&lt WARR LA(GRAVE)>, <&kp LC(SPC)>;
        };
        
    //encorder control WIN  
    w_r_alt_p: win-right-alt-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp 0>, <&kp RIGHT>;
        mods = <(MOD_RALT)>;
        keep-mods = <(MOD_RALT)>;
    };
    w_alt_p: win-alt-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_r_alt_p>, <&kp TAB>;
        mods = <(MOD_LALT)>;
        keep-mods = <(MOD_LALT)>;
    };    
    w_r_gui_p: win-right-gui-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp 0>, <&kp LC(RIGHT)>;
        mods = <(MOD_RGUI)>;
        keep-mods = <(MOD_RGUI)>;
    };
    w_gui_p: win-gui-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_r_gui_p>, <&kp RIGHT>;
        mods = <(MOD_LGUI)>;
        keep-mods = <(MOD_LGUI)>;
    };    
    w_alt_gui_p: win-alt-gui-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_gui_p>, <&w_alt_p>;
        mods = <(MOD_LALT|MOD_RALT)>;
    };
    w_r_ctrl_p: win-right-ctrl-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp 0>, <&kp TAB>;
        mods = <(MOD_RCTL)>;
        keep-mods = <(MOD_RCTL)>;
    };    
    w_ctrl_p: win-ctrl-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_r_ctrl_p>, <&kp DOWN>;
        mods = <(MOD_LCTL)>;
    };
    w_shift_p: win-shift-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&none>, <&kp RIGHT>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
    };     
    w_shift_ctrl_p: win-shift-ctrl-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_shift_p>, <&w_ctrl_p>;
        mods = <(MOD_LCTL|MOD_RCTL)>;
    };
    w_shift_ctrl_none_p: win_shift-ctrl-none-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp C_VOL_UP>, <&w_shift_ctrl_p>;
        mods = <(MOD_LSFT|MOD_LCTL|MOD_RSFT|MOD_RCTL)>;
    };
    win_enc_p: win-enc-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_shift_ctrl_none_p>, <&w_alt_gui_p>;
        mods = <(MOD_LALT|MOD_LGUI|MOD_RALT|MOD_RGUI)>;
    };
   
    w_r_alt_n: win-right-alt-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp 0>, <&kp LEFT>;
        mods = <(MOD_RALT)>;
        keep-mods = <(MOD_RALT)>;
    };
    w_alt_n: win-alt-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_r_alt_n>, <&kp LS(TAB)>;
        mods = <(MOD_LALT)>;
        keep-mods = <(MOD_LALT)>;
    };    
    w_r_gui_n: win-right-gui-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp 0>, <&kp LC(LEFT)>;
        mods = <(MOD_RGUI)>;
        keep-mods = <(MOD_RGUI)>;
    };
    w_gui_n: win-gui-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_r_gui_n>, <&kp LEFT>;
        mods = <(MOD_LGUI)>;
        keep-mods = <(MOD_LGUI)>;
    };    
    w_alt_gui_n: win-alt-gui-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_gui_n>, <&w_alt_n>;
        mods = <(MOD_LALT|MOD_RALT)>;
    };
    w_r_ctrl_n: win-right-ctrl-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp 0>, <&kp LS(TAB)>;
        mods = <(MOD_RCTL)>;
        keep-mods = <(MOD_RCTL)>;
    };    
    w_ctrl_n: win-ctrl-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_r_ctrl_n>, <&kp UP>;
        mods = <(MOD_LCTL)>;
    };
    w_shift_n: win-shift-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&none>, <&kp LEFT>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
    };      
    w_shift_ctrl_n: win-shift-ctrl-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_shift_n>, <&w_ctrl_n>;
        mods = <(MOD_LCTL|MOD_RCTL)>;
    };
    w_shift_ctrl_none_n: win_shift-ctrl-none-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp C_VOL_DN>, <&w_shift_ctrl_n>;
        mods = <(MOD_LSFT|MOD_LCTL|MOD_RSFT|MOD_RCTL)>;
    };
    win_enc_n: win-enc-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&w_shift_ctrl_none_n>, <&w_alt_gui_n>;
        mods = <(MOD_LALT|MOD_LGUI|MOD_RALT|MOD_RGUI)>;
    };
    
    win_enc: win-enc {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&win_enc_n>, <&win_enc_p>;
        tap-ms = <10>;
    };
    
//encorder control MAC

    //app select    
    m_gui_p: mac-gui-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&none>, <&kp TAB>;
        mods = <(MOD_LGUI|MOD_RGUI)>;
        keep-mods = <(MOD_LGUI)>;
    };    
    //browser tab move
    m_r_ctrl_p: mac-right-ctrl-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp 0>, <&kp TAB>;
        mods = <(MOD_RCTL)>;
        keep-mods = <(MOD_RCTL)>;
    };  
    m_ctrl_p: mac-ctrl-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&m_r_ctrl_p>, <&kp DOWN>;
        mods = <(MOD_LCTL)>;
    }; 
    m_shift_p: mac-shift-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&none>, <&kp RIGHT>;
        mods = <(MOD_RSFT|MOD_LSFT)>;
    };     
    m_shift_ctrl_p: mac-shift-ctrl-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&m_shift_p>, <&m_ctrl_p>;
        mods = <(MOD_LCTL|MOD_RCTL)>;
    };
    m_shift_ctrl_none_p: mac_shift-ctrl-none-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp C_VOL_UP>, <&m_shift_ctrl_p>;
        mods = <(MOD_LSFT|MOD_LCTL|MOD_RSFT|MOD_RCTL)>;
    };
    mac_enc_p: mac-enc-positive {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&m_shift_ctrl_none_p>, <&m_gui_p>;
        mods = <(MOD_LGUI|MOD_RGUI)>;
    };
    //app select    
    m_gui_n: mac-gui-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&none>, <&kp LS(TAB)>;
        mods = <(MOD_LGUI|MOD_RGUI)>;
        keep-mods = <(MOD_LGUI)>;
    };    
    //browser tab move
    m_r_ctrl_n: mac-right-ctrl-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp 0>, <&kp LS(TAB)>;
        mods = <(MOD_RCTL)>;
        keep-mods = <(MOD_RCTL)>;
    };    
    m_ctrl_n: mac-ctrl-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&m_r_ctrl_n>, <&kp UP>;
        mods = <(MOD_LCTL)>;
    }; 
    m_shift_n: mac-shift-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&none>, <&kp LEFT>;
        mods = <(MOD_RSFT|MOD_LSFT)>; 
  };         
    m_shift_ctrl_n: mac-shift-ctrl-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&m_shift_n>, <&m_ctrl_n>;
        mods = <(MOD_LCTL|MOD_RCTL)>;
    };
    m_shift_ctrl_none_n: mac_shift-ctrl-none-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp C_VOL_DN>, <&m_shift_ctrl_n>;
        mods = <(MOD_LSFT|MOD_LCTL|MOD_RSFT|MOD_RCTL)>;
    };
    mac_enc_n: mac-enc-negative {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&m_shift_ctrl_none_n>, <&m_gui_n>;
        mods = <(MOD_LGUI|MOD_RGUI)>;
    };
        
    mac_enc: mac-enc {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&mac_enc_n>, <&mac_enc_p>;
        tap-ms = <10>;
    }; 
     
    
      
    //JIS
    moSEMI: moSEMI {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp JP_SEMI>, <&kp JP_COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
     };                    
              
};



    keymap {
        compatible = "zmk,keymap";

          default_layer {
            bindings = <
&kp Q               &kp W             &kp E             &kp R            &kp T                             &kp Y           &kp U          &kp I        &kp O      &kp P
&kp A               &kp S             &kp D             &mt RCTRL F      &kp G           &tog NUM          &kp H           &kp J          &kp K        &kp L      &kp SEMICOLON
&mt LEFT_SHIFT Z    &kp X             &kp C             &kp V            &kp B           &trans            &kp N           &kp M          &kp COMMA    &kp DOT    &mt RIGHT_SHIFT SLASH
&kp LCTRL           &kp LEFT_WIN      &kp LEFT_ALT      &mt LCTRL DEL    &lt NUM SPACE   &trans            &kp BACKSPACE   &lt SYM ENTER  &to JIS      &mo BT     &lt MARR LC(SPC)
            >;   
            sensor-bindings = <&mac_enc>;
        };

          NUM_FUNC {
            bindings = <
&kp LG(LS(NUMBER_4))    &kp LG(X)       &kp LC(LS(TAB))         &kp LC(TAB)              &kp LG(R)                       &kp SLASH        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS
&kp LG(A)               &kp LG(C)       &kp LG(LEFT_BRACKET)    &kp LG(RIGHT_BRACKET)    &kp LG(V)           &trans      &kp ASTERISK     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PLUS
&kp LG(Z)               &kp LG(LS(Z))   &kp LC(LEFT_ARROW)      &kp LC(RIGHT_ARROW)      &kp LC(UP_ARROW)    &trans      &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp EQUAL
&trans                  &trans          &trans                  &trans                   &trans              &trans      &trans           &trans           &trans           &kp PERIOD       &trans
            >; 
            sensor-bindings = <&scroll_up_down>;
        };

          SYMBOLS {
            bindings = <
&kp LS(SLASH)  &kp DOUBLE_QUOTES  &kp EXCLAMATION  &kp ASTERISK  &kp PLUS                     &kp CARET  &kp UNDERSCORE  &none        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp AMPERSAND  &kp SINGLE_QUOTE   &kp DOLLAR       &none         &kp LA(BACKSLASH)   &trans   &kp HASH   &none           &kp PERCENT  &kp LEFT_BRACKET      &kp RIGHT_BRACKET
&kp F6         &kp F7             &kp F8           &none         &kp PIPE            &trans   &kp TILDE  &kp BACKSLASH   &none        &kp LEFT_BRACE        &kp RIGHT_BRACE 
&trans         &trans             &trans           &trans        &trans              &trans   &trans     &trans          &trans       &trans                &trans 
            >;  
            sensor-bindings = <&scroll_left_right>;
        };
        
          MAC_ARROW {
            bindings = <
&none           &none           &kp UP_ARROW    &none            &none            &none     &none           &kp UP_ARROW    &none            &none
&kp HOME        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END  &trans  &kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END 
&kp LEFT_SHIFT  &kp LCTRL       &none           &none            &none    &trans  &none     &none           &none           &kp RCTRL        &kp RIGHT_SHIFT
&trans          &trans          &trans          &trans           &trans   &trans  &trans    &trans          &trans          &trans           &trans
            >;
            sensor-bindings = <&media_control>;
        };        
        
          JIS {
            bindings = <
&kp Q             &kp W             &kp E            &kp R           &kp T                             &kp Y          &kp U           &kp I        &kp O      &kp P
&kp A             &mt RIGHT_WIN S   &mt RIGHT_ALT D  &mt RCTRL F     &kp G           &tog JNUM         &kp H          &kp J           &kp K        &kp L      &moSEMI
&mt LEFT_SHIFT Z  &kp X             &kp C            &kp V           &kp B           &trans   &kp N          &kp M           &kp COMMA    &kp DOT    &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN      &kp LEFT_ALT     &mt LCTRL DEL   &lt JNUM SPACE  &trans            &kp BACKSPACE  &lt JSYM ENTER  &to 0        &mo BT     &lt WARR LA(GRAVE)
            >;
            sensor-bindings = <&win_enc>;
        };
        
          JIS_NUM {
            bindings = <
&kp LG(LS(S))  &kp LC(X)  &kp LC(LS(TAB))         &kp LC(TAB)              &kp F5             &kp SLASH        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS
&kp LC(A)      &kp LC(C)  &kp LA(LEFT_ARROW)      &kp LA(RIGHT_ARROW)      &kp LC(V)  &trans  &kp JP_ASTRK     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp JP_PLUS
&kp LC(Z)      &kp LC(Y)  &kp LG(LC(LEFT_ARROW))  &kp LG(LC(RIGHT_ARROW))  &kp LG(D)  &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp JP_EQUAL
&trans         &trans     &trans                  &trans                   &trans     &trans  &trans           &trans           &trans           &kp PERIOD       &trans
            >;
            sensor-bindings = <&scroll_up_down>;
        };
        
          JIS_SYMBOL {
            bindings = <
&kp LS(SLASH) &kp JP_DQT  &kp EXCLAMATION  &kp JP_ASTRK  &kp JP_PLUS            &kp JP_CARET  &kp JP_UNDER   &none        &kp JP_LPAR  &kp JP_RPAR
&kp JP_AMPS   &kp JP_SQT  &kp DOLLAR       &none         &kp JP_BSLH   &trans   &kp HASH      &none          &kp PERCENT  &kp JP_LBKT  &kp JP_RBKT
&kp F6        &kp F7      &kp F8           &none         &kp JP_PIPE   &trans   &kp JP_TILDE  &kp JP_YEN     &none        &kp JP_LBRC  &kp JP_RBRC 
&trans        &trans      &trans           &trans        &trans        &trans   &trans        &trans         &trans       &trans       &trans 
            >;
            sensor-bindings = <&scroll_left_right>;
        }; 

          WIN_ARROW {
            bindings = <
&none           &none           &kp UP_ARROW    &none            &none            &none     &none           &kp UP_ARROW    &none            &none
&kp HOME        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END  &trans  &kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END 
&kp LEFT_SHIFT  &kp LCTRL       &none           &none            &none    &trans  &none     &none           &none           &kp RCTRL        &kp RIGHT_SHIFT
&trans          &trans          &trans          &trans           &trans   &trans  &trans    &trans          &trans          &trans           &trans
            >;
            sensor-bindings = <&scroll_left_right>;
        }; 
        
           BT {
            bindings = <
&bt BT_CLR_ALL  &none     &none    &none    &bt BT_CLR                     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4
&none           &none     &none    &none    &none        &trans            &out OUT_TOG  &none         &none         &none             &none
&none           &none     &none    &none    &none        &trans   &none         &none         &none         &trans   &trans
&ind_bat        &ind_con  &trans   &trans   &trans       &trans            &trans        &trans        &trans        &trans            &trans
            >;
            sensor-bindings = <&scroll_left_right>;
        }; 
        
         MOUSE {
            bindings = <
&bt BT_CLR_ALL  &none     &none    &none    &bt BT_CLR                     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4
&none           &none     &none    &none    &none        &trans            &out OUT_TOG  &none         &none         &none             &none
&none           &none     &none    &none    &none        &trans            &none         &none         &none         &trans           &trans
&ind_bat        &ind_con  &trans   &trans   &trans       &trans            &trans        &trans        &trans        &trans            &trans
            >;
            sensor-bindings = <&scroll_left_right>;
        };                    

          BT {
            bindings = <
&bt BT_CLR_ALL  &none     &none    &none    &bt BT_CLR                     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4
&none           &none     &none    &none    &none        &trans            &out OUT_TOG  &none         &none         &none             &none
&none           &none     &none    &none    &none        &trans  &none         &none         &none         &trans            &trans
&ind_bat        &ind_con  &trans   &trans   &trans       &trans            &trans        &trans        &trans        &trans            &trans
            >;
            sensor-bindings = <&scroll_left_right>;
        };        
    };   
};
